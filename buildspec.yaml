version: 0.2

env:
  variables:
    ECR_REPO_NAME: "sonar"  # Nome do repositório ECR
    AWS_ACCOUNT_ID: "985539772981"  # ID da conta AWS
    AWS_REGION: "us-east-1"  # Região AWS
    ENV: "dev"  # Defina o ambiente (exemplo: dev, prod)

phases:
  pre_build:
    commands:
      - echo "AWS_REGION: ${AWS_REGION}"  # Verificar valor da região
      # Build the ECR image URI
      - export ECR_MAIN_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
      - export ECR_IMAGE_URI="${ECR_MAIN_URI}/${ECR_REPO_NAME}:${ENV}-$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c1-8)"
      # Authenticate Docker with ECR using temporary credentials
      - echo "Logging into Amazon ECR..."
      - aws ecr get-login-password --region "${AWS_REGION}" | docker login --username AWS --password-stdin "${ECR_MAIN_URI}" 2>&1 | tee aws_login_output.log
      - echo "Docker Login Command Output:"
      - cat aws_login_output.log

  build:
    commands:
      # Build and package the project using Maven, skipping tests
      - echo "Building the project with Maven..."
      - mvn install -DskipTests=true
      - mvn clean package -DskipTests=true
      # Build the Docker image
      - echo "Building the Docker image..."
      - docker build -t "${ECR_REPO_NAME}:latest" .

  post_build:
    commands:
      # Tag the Docker image with the ECR image URI
      - echo "Tagging the Docker image..."
      - docker tag "${ECR_REPO_NAME}:latest" "${ECR_IMAGE_URI}"
      # Push the Docker image to the ECR repository
      - echo "Pushing the Docker image to ECR..."
      - docker push "${ECR_IMAGE_URI}"
      # Generate an image definition JSON file for ECS Pipeline
      - echo "Generating image definition JSON file..."
      - printf '[{"name":"%s","imageUri":"%s"}]' "${ECR_REPO_NAME}" "${ECR_IMAGE_URI}" > imageDefinitionSLayerGetAdress.json

artifacts:
  base-directory: .
  files:
    - 'imageDefinitionSLayerGetAdress.json'
